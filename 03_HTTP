# HTTP
## 1. 서버와 클라이언트

서버와 클라이언트의 관계    
- 클라이언트가 서버로 요청(request)을 보냄
- 서버는 요청을 처리
- 처리 후 클라이언트로 응답(response)보냄

## 2. 노드로 HTTP서버 만들기
http에 응답하는 노드 서버
- createServer로 요청 이벤트에 대기
- req객체는 요청에 대한 정보가, res 객체는 응답에 관한 정보가 담겨져 있다.
```javascript
  const http = require('http');
  http.createServer((req,res) => {
    //여기에 어떻게 응답할 지 적음
  })
```
## 3.REST API와 라우팅
### REST API    

서버에 요청을 보낼 때 ->  주소를 통해 요청의 내용을 표현     
- /index.html이면 index.html을 보내달라는 뜻
- 항상 html을 요구할 필요는 없음
- 서버가 이해하기 쉬운 주소가 좋음

REST API(Representational State Transfer)
- 서버의 자원을 정의하고 자원에 대한 주소를 지원하는 방법
- /user이면 사용자 정보에 관한 정보를 요청하는 것
- /post면 게시글에 관련된 자원을 요청하는 것

HTTP 요청 메서드    
- GET: 서버 자원을 가져오라고 할 때   
- POST : 서버에 자원을 새로 등록하고자 할 때(또는 뭘 사용할지 애매할 때)  
- PUT : 서버의 자원을 요청에 들어있는 자원으로 치환하고자 할 때   
- PATCH : 서버 자원의 일부만 수정하고자 할 때 사용    
- DELETE : 서버의 자원을 삭제하고자 할 때 사용    

HTTP 프로토콜   
클라이언트가 누구든 서버와 HTTP 프로토콜로 소통 가능
- iOS, 안드로이드, 웹이 모두 같은 주소로 요청을 보낼 수 있음
- 서버와 클라이언트의 분리

RESTful     
REST API를 사용한 주소 체계를 이용하는 서버
GET /user는 사용자를 조회하는 요청, POST /user는 사용자를 등록하는 요청

HTTP Status Code  
클라이언트가 요청한 결과 상태를 **특정번호**로 반환

REST 요청 확인하기  
웹 브라우저의 개발자도구(F12) Network탭에서 요청 내용 실시간 확인 가능
## 4.쿠키와 세션
### 쿠키
요청의 단점   
- 서버는 누가 누가 보냈는지 모름(IP주소와 브라우저 정보 정도만 앎)  
- 로그인을 구현하면 됨
- 쿠키와 세션이 필요

쿠키  
**키 =값의 쌍**
- 매 요청마다 서버에 동봉해서 보냄
- 서버는 쿠키를 읽어 누구인지 파악  
처음에 클라이언트에서 요청시 서버에서 쿠키와 응답을 줌

### 쿠키 서버 만들기 
writeHead : 요청 헤더에 입력하는 메서드 
Set-Cookie : 브라우저에게 쿠키를 설정하라고 명령

쿠키: 키=값의 쌍
- name = zerocho
- 매 요청마다 서버에 동봉해서 보냄

**실 서버에는 세션을 구현하지 말자**  
-> express-session 사용하기

```javascript
const http = require("http");

http
  .createServer((req, res) => {
    console.log(req.url, req.headers.Cookie);
    res.writeHead(200, { "Set-Cookie": "mycookie=test" });
    res.end("Hello Cookie");
  })
  .listen(8083, () => {
    console.log("8083번 포트에서 서버 대기 중입니다.");
  });
```
### 쿠키 옵션
Set-Cookie 시 다양한 옵션이 있음
- 쿠키명=쿠키값: 기본적인 쿠키의 값
  mycookie=test 또는 mycookie=zerocho 같이 설정
-  Expires=날짜: 만료 기한. 이 기한이 지나면 쿠키가 제거된다(기본값은 클라이언트가 종료될 때 까지)
-  Max-age=초: Expires와 비슷, 날짜 대신 초를 입력가능
-  Domain=도메인명:쿠키가 전송될 도메인을 특정할 수 있음 기본값은 현재 도메인
-  Path=URL: 쿠키가 전송될 URL을 특정할 수 있음
기본값은 '/' 이고 이 경우에는 모든 URL에서 쿠키를 전송할 수 있음
- Secure: HTTPS일 경우에만 쿠키가 전송가능
- HttpOnly: 설정 시 자바스크립트에서 쿠키에 접근 할 수 없음. 쿠키 조작을 방지하기 위해 설정하는 것이 좋음

### 쿠키에 정보 입력하기
### 헤더와 본문
HTTP 요청과 응답은 헤더와 본문을 가짐
- 헤더는 요청 또는 응답에 대한 정보를 가짐
- 본문은 주고받는 실제 데이터
- **쿠키는** 부가적인 정보이므로 **헤더에 저장**

### 세션
쿠키의 정보는 노출되고 수정되는 위험이 있음
- 중요한 정보는 서버에서 관리되고 클라이언트에는 세션 키만 제공
- 서버에 세션객체(session) 생성 후, uniqeInt(키)를 만들어 속성명으로 사용
- 속성 값에 정보를 저장하고 uniqueInt를 클라이언트에 보냄

```javascript
const session = {};
http.createServer(async (req, res) => {
  const cookies = parseCookies(req.headers.cookie);
  if (req.url.startsWith("login")) {
    const { query } = url.parse(req.url);
    const { name } = qs.parse(query);
    const expires = new Date();
    expires.setMinutes(expires.getMinutes() + 5);
    const uniqueInt = Date.now();
    session[uniqueInt] = {
      name,
      expires,
    };
    res.writeHead(302, {
      Location: "/",
      "Set-Cookie":
        "session=${uniqueInt}; Expires=${expires.toGMTString()} HttpOnly; Path=/",
    });
    res.end();
  } else if (cookies.session && session[cookies.session].expires > new Date()) {
    res.writeHead(200, { "Content-Type": "text/plain; chartset=utf-8" });
    res.end("${session[cookies.session].name}님 안녕하세요");
  } else {
    try {
      const data = await fs.readFile("./cookie2.html");
      res.writeHead(200, { "Content-Type": "text/html; charset=utf-8" });
      res.end(data);
    } catch (error) {
      res.writeHead(500, { "Content-Type": "text/plain; charset=uft-8" });
      res.end(error.message);
    }
  }
});
```

## https http2
### 5. https
웹서버에 SSL 암호화를 추가하는 모듈   
- 오고가는 데이터를 암호화해서 중간에 다른사람이 요청을 가로채더라도 내용을 확인할 수 없음  
- 요즘에는 https 적용이 필수(개인 정보가 있는 곳은 특히 필수)

```javascript
const fs = require("fs");

https
  .createServer(
    {
      cart: fs.readFileSync("도메인 인증서 경로"),
      key: fs.readFileSync("도메인 비밀키 경로"),
      ca: [
        fs.readFileSync("상위 인증서 경로"),
        fs.readFileSync("상위 인증서 경로"),
      ],
    },
    (req, res) => {
      res.writeHead(200, { "Content-Type": "text/html; charset=utf-8" });
      res.write("<h1>Hello Node</h1>");
      res.end("<p>Hello Server</p>");
    }
  )
  .listen(443, () => {
    console.log("443번 포트에서 대기 중");
  });

```
### http2
SSL 암호화와 더불어 최신 HTTP 프로토콜인 http/2를 이용하는 모듈
- 요청 및 응답 방식이 기존 http/1.1보다 개선됨
- 웹의 속도도 개선된다

## 6. cluster
### cluster
기본적으로 싱글 스레드인 노드가 CPU 코어를 모두 사용할 수 있게해주는 모듈
- 포트를 공유하는 노드 프로세스를 여러 개 둘 수 있음
- 요청이 많이 들어왔을 때 병렬로 실행된 서버의 개수만큼 요청이 분산됨
- 서버에 무리가 덜감
- 코어가 8개인 서버가 있을 때: 보통은 코어 하나만 활용
- cluster로 코어 하나 당 노드 프로세스 하나를 배정 가능
- 성능이 8배가 되는 것은 아니지만 개선이 된다.
- **단점: 컴퓨터 자원(메모리, 세션) 공유 못함**   
-> Redis등 별도 서버로 해결 

### 서버 클러스터링
마스터 프로세스와 워커 프로세스
- 마스터 프로세스는 CPU갯수만큼 워커 프로세스를 만듦(worker_threads랑 구조 비슷 요청이 들어오면 워커 프로세스에 고르게 분배)
```javascript
const cluster = require("cluster");
const http = require("http");
const numCPUs = require("os").cpus().length;

if (cluster.isMaster) {
  console.log(`마스터 프로세스 아이디 : ${process.pid}`);
  //CPU 갯수만큼 워커를 생산
  for (let i = 0; i < numCPUs; i += 1) {
    cluster.fork();
  }

  // 워커가 종료 되었을 때
  cluster.on("exit", (worker, code, signal) => {
    console.log(`${worker.process.pid}번 워커가 종료되었습니다`);
    console.log("code", code, "signal", signal);
    cluster.fork(); // 프로세서 하나가 만들어지면 하나 더 만들어짐
  });
} else {
  http
    .createServer((req, res) => {
      res.writeHead(200, { Content_Type: "text/html; charset=utf-8" });
      res.write("<h1>Hello Node</h1>");
      res.end("<h1>Hello Cluster</h1>");
      setTimeout(() => {
        //워커 프로세스를 확인하기 위해서 1초마다 강제 종료
        process.exit(1);
        console.error();
      }, 1000);
    })
    .listen(8086);
}

```